/**
 * Remove all MediaMatch listeners from the window object and empties the listeners array
 * @return { void }
 */
export function removeListeners(): void;
/**
 * Convert available breakpoints in to media query strings
 * @returns {string[]} An array of media query strings
 */
export function createMediaQueries(): string[];
/**
 * Subscribe to a given media query and execute a callback when matched
 *
 * @type {Function} - Adds a listener using the matchMedia method on the window
 * @param {string} mediaQuery - The media query to listen for match status
 * @param {Function} callback - The callback to execute when the mediaQuery is matched
 */
export function subscribeToMediaQuery(mediaQuery: string, callback: Function): boolean;
export function calculateBreakpointsToRender(bp: string, available: ref): string[];
export function calculateOrientationsToRender(landscape: boolean, portrait: boolean): string[];
export function calculateThemesToRender(dark: boolean, light: boolean): string[];
export function calculateMotionToRender(inert: boolean, motion: boolean): string[];
//# sourceMappingURL=helpers.d.ts.map